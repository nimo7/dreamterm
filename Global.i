;*
**	Global definations, every program part can use these.
**
*/

	include "exec/types.i"
	include "utility/tagitem.i"

STRTAG	EQU	TAG_USER+0
STRMIN	EQU	TAG_USER+0
STRMAX	EQU	TAG_USER+9999
VALTAG	EQU	TAG_USER+10000
VALMIN	EQU	TAG_USER+10000
VALMAX	EQU	TAG_USER+19990
DATTAG	EQU	TAG_USER+20000
DATMIN	EQU	TAG_USER+20000
DATMAX	EQU	TAG_USER+29999

STR_PB_FIRST	EQU	STRTAG+00
VAL_PB_FIRST	EQU	VALTAG+00
DAT_PB_FIRST	EQU	DATTAG+00

PAR_NONE	EQU	$01
PAR_EVEN	EQU	$02
PAR_ODD		EQU	$04
PAR_MARK	EQU	$08
PAR_SPACE	EQU	$10

FLOW_NONE	EQU	$01
FLOW_XONXOFF	EQU	$02
FLOW_RTSCTS	EQU	$04

STAT_NONE	EQU	$01
STAT_BAR	EQU	$02
STAT_WINDOW	EQU	$04

LOG_CALLS	EQU	$01
LOG_XFER	EQU	$02

PB_Name		EQU	STRTAG+0
PB_Phone	EQU	STRTAG+1
PB_PassWord	EQU	STRTAG+2
PB_InitString	EQU	STRTAG+3
PB_Comment	EQU	STRTAG+4
PB_DialString	EQU	STRTAG+5
PB_Func1	EQU	STRTAG+6
PB_Func2	EQU	STRTAG+7
PB_Func3	EQU	STRTAG+8
PB_Func4	EQU	STRTAG+9
PB_Func5	EQU	STRTAG+10
PB_Func6	EQU	STRTAG+11
PB_Func7	EQU	STRTAG+12
PB_Func8	EQU	STRTAG+13
PB_Func9	EQU	STRTAG+14
PB_Func10	EQU	STRTAG+15
PB_Charset	EQU	STRTAG+16
PB_Protocol	EQU	STRTAG+17
PB_SerName	EQU	STRTAG+18
PB_LogName	EQU	STRTAG+19
PB_UpPath	EQU	STRTAG+20
PB_DnPath	EQU	STRTAG+21
PB_PhonePre	EQU	STRTAG+22
PB_DteRate	EQU	VALTAG+0
PB_FlowControl	EQU	VALTAG+1
PB_DataBits	EQU	VALTAG+2
PB_Parity	EQU	VALTAG+3
PB_StopBits	EQU	VALTAG+4
PB_FixRate	EQU	VALTAG+5
PB_LogCall	EQU	VALTAG+6
PB_Status	EQU	VALTAG+7
PB_Aga		EQU	VALTAG+8
PB_CostFirst	EQU	VALTAG+9
PB_CostRest	EQU	VALTAG+10
PB_HardScr	EQU	VALTAG+11
PB_HardSer	EQU	VALTAG+12
PB_ModeId	EQU	VALTAG+13
PB_Depth	EQU	VALTAG+14
PB_Columns	EQU	VALTAG+15
PB_Lines	EQU	VALTAG+16
PB_Wb		EQU	VALTAG+17
PB_SerUnit	EQU	VALTAG+18
PB_Capture	EQU	VALTAG+19
PB_SerBufSize	EQU	VALTAG+20
PB_RxdPopup	EQU	VALTAG+21
PB_FullDuplex	EQU	VALTAG+22
PB_KeepWb	EQU	VALTAG+23
PB_Priority	EQU	VALTAG+24
PB_cr2crlf	EQU	VALTAG+25
PB_lf2crlf	EQU	VALTAG+26
PB_RtsBlit	EQU	VALTAG+27
PB_HLines	EQU	VALTAG+28
PB_AutoXfer	EQU	VALTAG+29
PB_QuietXfer	EQU	VALTAG+30
PB_WaitEntry	EQU	VALTAG+31
PB_WaitDial	EQU	VALTAG+32
PB_Emulation	EQU	VALTAG+33
PB_ANSIWrap	EQU	VALTAG+34
PB_ANSIKillBs	EQU	VALTAG+35
PB_ANSIStrip	EQU	VALTAG+36
PB_ANSICls	EQU	VALTAG+37
PB_ANSICr2crlf	EQU	VALTAG+38
PB_Double	EQU	VALTAG+39
PB_IEMSI	EQU	VALTAG+40
PB_Safe		EQU	VALTAG+41
PB_CallLast	EQU	VALTAG+42
PB_CallCost	EQU	VALTAG+43
PB_CallTime	EQU	VALTAG+44
PB_CallCount	EQU	VALTAG+45
PB_DTRHangup	EQU	VALTAG+46
PB_ANSIPc	EQU	VALTAG+47
PB_PreScroll	EQU	VALTAG+54

PB_ANSICol	EQU	DATTAG+00
PB_HEXCol	EQU	DATTAG+01

DDteRate	EQU	38400
DAga		EQU	1
DSerBufSize	EQU	16384
DColumns	EQU	80
DLines		EQU	32
DDepth		EQU	2
DHLines		EQU	32

CS_FontName	EQU	(STRTAG+0+1000)
CS_Xsize	EQU	(VALTAG+1+1000)
CS_Ysize	EQU	(VALTAG+2+1000)

CSXsize		EQU	8
CSYsize		EQU	8

		NREF	_gl_cur_qs
		NREF	_gl_cur_qv
		NREF	_gl_cur_qd

CUR_STR:	MACRO
		move.l	_gl_cur_qs+[[\1-STR_PB_FIRST]*4],\2
		ENDM

CUR_VAL:	MACRO
		move.l _gl_cur_qv+[[\1-VAL_PB_FIRST]*4],\2
		ENDM

CUR_DAT:	MACRO
		move.l _gl_cur_qd+[[\1-DAT_PB_FIRST]*4],\2
		ENDM

;CUR:		MACRO
;		IFNE (\1 <= STR_PB_LAST)
;		 move.l	_gl_cur_qs+[[\1-STR_PB_FIRST]*4],\2
;	 	ELSE
;		 IFNE (\1 <= VAL_PB_LAST)
;		  move.l _gl_cur_qv+[[\1-VAL_PB_FIRST]*4],\2
;		 ELSE
;		  move.l _gl_cur_qd+[[\1-DAT_PB_FIRST]*4],\2
;		 ENDIF
;		ENDIF
;		ENDM
